package Chap06_07.Ex03;
// 기본 생성자 : class aa 는 기본 생성자가 생략되어 있다.
// 일반적으로 클래스 블락에 1. 필드 2. 생성자 3. 메소드 형식으로 작성한다.
// 생성자의 역할 : 1. 객체생성 2. 필드의 값을 초기화 
class aa{ int m;		// 필드 ( 클래스 블락에 선언된 변수 ) : 데이터 타입 변수명
						// 힙영역에 저장, 객체화 시켜야 사용가능, 예외-> static
						// 힙영역에 RAM 에는 반드시 초기값이 들어가야 한다.

	aa() {} 			// <== 기본 생성자 : 클래스 이름과 동일 하면서 리턴타입이 없는 메소드를 생성자라 부른다.
	void work() {			// 메소드 : 리턴타입 메소드 명 ( 인풋 매개변수) { 실행부 }
							// 메소드 호출 : work()
		System.out.println(m);	//0 		//m : 메모리의 값을 가지고 온다. 
	}
	
}
class bb{ int m ;		// m 은 heap 영역에 저장이 되고, 기본값으로 0을 출력 
	bb(){} 	// 기본 생성자는 생략가능하다 
	void work() {
		System.out.println(m); 	// m = 0
	}

}
// 객체 생성시 생성자를 통해서 필드의 초기값을 할당하고 객체 생성 ,
class cc{ int m ;
// cc (){}	// 기본생성자는 생략됨 , 다른 생성자가 존재하는 경우 외부에서 기본생성자 호출시 기본생성자는 생략되면 안된다. 
	cc( int c ){		// 생성자의 인풋값을 받아서 메모리의 기본값으로 m변수의 값을 로드 
		m = c;
	}
	void work () {
		System.out.println(m);	// m은 객체 생성시 생성자에 정수 값을 넣어서 필드m을 초기화 시켜준다. 
	}
}
class dd{ 
	int m, n, l;
	dd(){};		//기본 생성자
	dd(int m, int n ){			// 매개변수 2개 
		this.m=m;this.n=n;		// this : 자기 자신의 객체, 지역변수가 아니라 필드의 변수를 알려줌 
	}
	dd(int a , int b, int c){ 	// 매개변수가 3개인 생성자 
		m=a ;n=b ; l=c;
	}
	void work () {
		System.out.println("m : "+ m + " , n : "+n+" , l : "+l);
	}
}

public class DefaultConstructor {
	
	public static void main(String[] args) {
		// 클래스내에 포함 될 수 있는 것 : 1. 필드 2. 메소드 3. 생성자 , 4. inner 클래스 
		// 생성자의 두가지 특징 : 1. 클래스 이름과 동일한 이름을 가진 메소드를 생성자라고 한다. 2. 생성자는 반환 타입이 없다. ( 메소드는 반환 타입이 있다 )
		// 생성자를 사용하는 이유 : 객체를 생성할 때 필드의 값을 초기화 하면서 객체를 생성하고자 할때 사용
		// 클래스 내에서 필드의 초기값은 일반적으로 할당 하지 않는다.
		// 클래스의 객체를 생성할 때 / 초기값을 할당하면서 객체를 생성할 때 
		
		
		// 기본 생성자 ( default constructor ) : 인풋 매개변수가 없는 생성자, 실행부의 값도 비어있는 상태의 생성자 	
		// 기본 생성자는 생략 가능하다.
		// 생략되어있을경우, 컴파일러가 자동으로 생성해서 컴파일 
		// 클래스 내의 기본 생성자 이외의 다른 생성자가 존재하는 경우 기본 생성자 호출시 생략되면 안된다.
		
		aa a = new aa(); // aa(); : 기본 생성자 호출 , << 생성자 생략됨 >>
		a.work();
		bb b = new bb();
		b.work(); 		// 객체의 초기값 출력 ==> 0
		cc c = new cc(3);	// 생성자 호출시 기본값을 인풋해서 메모리 필드에 초기값 구성 
		c.work();			// 객체 생성시 기본 기능 : 객체생성과 + 필드의 값을 초기
		cc c1= new cc(5);
		c1.work();
		cc c2 = new cc(10);
		c2.work();
		// class cc 는 기본 생성자가 생략되어있다. cc (){} 
		// class cc 는 인풋 매개변수가 하나인 생성자가 존재 
		//cc c3 new c(); // 오류 발생 : 
		dd d = new dd();
		d.work();
		dd d1 = new dd(3,4,5);	// 매개변수가 정수 3개인 생성자를 호출 
		d1.work();
		dd d2 = new dd(1,2); // 매개변수가 정수 2개인 생성자를 호출 
		d2.work();
		// 생성자 : 메소드 이름이 객체이름과 리턴값이 없는 메소드 
		// 객체 내의 필드의 값을 초기화 할때 오버로딩 (Overloading)에 의해서 해당 생성자가 호출됨 
		// 오버로딩 : 메소드명(생성자명) , 타입 (int, String  .. ..) , 매개변수 갯수에 따라서 해당 메소드를 로드한다. <== 시그니쳐  
		
		
		
	
	}

}
